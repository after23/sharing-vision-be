// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: createPost :execresult
INSERT INTO posts (
    title,
    content,
    category,
    status,
    created_date
) VALUES (
    ?, ?, ?, ?, ?
)
`

type createPostParams struct {
	Title       string       `json:"title"`
	Content     string       `json:"content"`
	Category    string       `json:"category"`
	Status      string       `json:"status"`
	CreatedDate sql.NullTime `json:"created_date"`
}

func (q *Queries) createPost(ctx context.Context, arg createPostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.Status,
		arg.CreatedDate,
	)
}

const deletePost = `-- name: deletePost :execresult
DELETE FROM posts WHERE id=?
`

func (q *Queries) deletePost(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePost, id)
}

const getPost = `-- name: getPost :many
SELECT title, content, category, status FROM posts LIMIT ? OFFSET ?
`

type getPostParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type getPostRow struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Category string `json:"category"`
	Status   string `json:"status"`
}

func (q *Queries) getPost(ctx context.Context, arg getPostParams) ([]getPostRow, error) {
	rows, err := q.db.QueryContext(ctx, getPost, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []getPostRow{}
	for rows.Next() {
		var i getPostRow
		if err := rows.Scan(
			&i.Title,
			&i.Content,
			&i.Category,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: getPostById :one
SELECT title, content, category, status FROM posts where id=?
`

type getPostByIdRow struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Category string `json:"category"`
	Status   string `json:"status"`
}

func (q *Queries) getPostById(ctx context.Context, id int32) (getPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i getPostByIdRow
	err := row.Scan(
		&i.Title,
		&i.Content,
		&i.Category,
		&i.Status,
	)
	return i, err
}

const updatePost = `-- name: updatePost :execresult
UPDATE posts SET title=?, content=?, category=?, status=? WHERE id=?
`

type updatePostParams struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Category string `json:"category"`
	Status   string `json:"status"`
	ID       int32  `json:"id"`
}

func (q *Queries) updatePost(ctx context.Context, arg updatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.Status,
		arg.ID,
	)
}
